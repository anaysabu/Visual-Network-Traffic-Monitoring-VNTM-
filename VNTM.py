import dpktimport socketimport pygeoipimport osimport webbrowserimport tkinter as tkfrom tkinter import filedialog, messagebox# Make sure the path to your GeoIP database is correctgi = pygeoip.GeoIP('Geodata.dat')  # Adjust the path if neededdef plotIPs(pcap, user_ip):    kmlPts = ''    for (ts, buf) in pcap:        try:            eth = dpkt.ethernet.Ethernet(buf)            ip = eth.data            src = socket.inet_ntoa(ip.src)            dst = socket.inet_ntoa(ip.dst)            KML = retKML(dst, src, user_ip)            kmlPts += KML        except:            pass    return kmlPtsdef retKML(dstip, srcip, user_ip):    dst = gi.record_by_name(dstip)    try:        src = gi.record_by_name(user_ip)    except:        src = None        try:        dstlongitude = dst['longitude']        dstlatitude = dst['latitude']        if src:            srclongitude = src['longitude']            srclatitude = src['latitude']        else:            srclongitude = 0.0            srclatitude = 0.0        kml = (            '<Placemark>\n'            '<name>%s</name>\n'            '<extrude>1</extrude>\n'            '<tessellate>1</tessellate>\n'            '<styleUrl>#transBluePoly</styleUrl>\n'            '<LineString>\n'            '<coordinates>%6f,%6f\n%6f,%6f</coordinates>\n'            '</LineString>\n'            '</Placemark>\n'        ) % (dstip, dstlongitude, dstlatitude, srclongitude, srclatitude)        return kml    except:        return ''def process_pcap(file_path, user_ip, output_file_name):    try:        with open(file_path, 'rb') as f:            pcap = dpkt.pcap.Reader(f)            kmlheader = '<?xml version="1.0" encoding="UTF-8"?>\n<kml xmlns="http://www.opengis.net/kml/2.2">\n<Document>\n' \                        '<Style id="transBluePoly">' \                        '<LineStyle>' \                        '<width>1.5</width>' \                        '<color>501400E6</color>' \                        '</LineStyle>' \                        '</Style>'            kmlfooter = '</Document>\n</kml>\n'            kmldoc = kmlheader + plotIPs(pcap, user_ip) + kmlfooter                        # Save the KML document to a file with the custom name            with open(output_file_name, 'w') as output_file:                output_file.write(kmldoc)                        # Open the Google Maps URL in the default web browser            webbrowser.open("https://www.google.com/mymaps")            messagebox.showinfo("Success", "KML file created and opened in Google Maps!")        except Exception as e:        messagebox.showerror("Error", f"An error occurred: {e}")def browse_file():    file_path = filedialog.askopenfilename(filetypes=[("PCAP files", "*.pcap")])    entry_pcap_file.delete(0, tk.END)    entry_pcap_file.insert(0, file_path)def on_submit():    pcap_file = entry_pcap_file.get()    user_ip = entry_user_ip.get()    output_file_name = entry_output_file.get() + '.kml'        if not pcap_file or not user_ip or not output_file_name:        messagebox.showerror("Input Error", "Please fill all fields.")        return        process_pcap(pcap_file, user_ip, output_file_name)# Create the main windowroot = tk.Tk()root.title("PCAP to KML Converter")# PCAP File Selectiontk.Label(root, text="Select PCAP File:").grid(row=0, column=0, padx=10, pady=5, sticky=tk.W)entry_pcap_file = tk.Entry(root, width=50)entry_pcap_file.grid(row=0, column=1, padx=10, pady=5)btn_browse = tk.Button(root, text="Browse", command=browse_file)btn_browse.grid(row=0, column=2, padx=10, pady=5)# User IP Inputtk.Label(root, text="Enter your Public IP:").grid(row=1, column=0, padx=10, pady=5, sticky=tk.W)entry_user_ip = tk.Entry(root, width=50)entry_user_ip.grid(row=1, column=1, padx=10, pady=5)# Output File Name Inputtk.Label(root, text="Output KML File Name:").grid(row=2, column=0, padx=10, pady=5, sticky=tk.W)entry_output_file = tk.Entry(root, width=50)entry_output_file.grid(row=2, column=1, padx=10, pady=5)# Submit Buttonbtn_submit = tk.Button(root, text="Convert", command=on_submit)btn_submit.grid(row=3, column=1, pady=10)# Run the applicationroot.mainloop()